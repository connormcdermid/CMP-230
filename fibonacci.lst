     1                                  ; AUTHOR: Connor McDermid
     2                                  ; DATE: 2021-11-05
     3                                  ; 64-bit Lab 7 "fibonacci"
     4                                  %include "Macros_CPsub64.inc"
     5                              <1> ;--------------------------- MACROS ------------------------------------------
     6                              <1> ; Change Log:
     7                              <1> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     8                              <1> ;
     9                              <1> ;
    10                              <1> ;-----------------------------------------------------------------------------
    11                              <1> %ifndef MACRO_CPSUB64
    12                              <1> %define MACRO_CPSUB64
    13                              <1> 
    14                              <1> %define STDIN  0
    15                              <1> %define STDOUT 1
    16                              <1> %define STDERR 2
    17                              <1> 
    18                              <1> %define TAB 09h
    19                              <1> %define NL 0Ah
    20                              <1> 
    21                              <1> ; define the timespec structure used in nanosleep
    22                              <1> struc timespec
    23 00000000 ????????            <1>      tv_sec: resd 1
    24 00000004 ????????            <1>      tv_nsec: resd 1
    25                              <1> endstruc
    26                              <1> 
    27                              <1> 
    28                              <1> ; Synonym for NASM invoke
    29                              <1> %ifnmacro INVOKE
    30                              <1> %macro INVOKE 1-*.nolist
    31                              <1>      %rep %0 - 1
    32                              <1>      %rotate -1
    33                              <1>      push qword %1
    34                              <1>      %endrep
    35                              <1>      %rotate -1
    36                              <1>      call %1
    37                              <1>      add rsp, ( %0 - 1 ) * 8
    38                              <1> %endmacro
    39                              <1> %endif
    40                              <1> 
    41                              <1> 
    42                              <1> %ifnmacro mWrite
    43                              <1> ;------------------------------------------------------
    44                              <1> %macro mWrite 1.nolist
    45                              <1> ;
    46                              <1> ; Writes a string literal to standard output.
    47                              <1> ; Receives: a string enclosed in single or double 
    48                              <1> ;   quotes (null terminator not required).
    49                              <1> ;------------------------------------------------------
    50                              <1> segment .data
    51                              <1> 	%%string: db %1, 0
    52                              <1> segment .text
    53                              <1> 	push	rdx
    54                              <1> 	mov	rdx,%%string
    55                              <1>  	call	WriteString
    56                              <1>  	pop	rdx
    57                              <1> %endmacro
    58                              <1> %endif
    59                              <1> 
    60                              <1> 
    61                              <1> %ifnmacro mWriteSpace
    62                              <1> ;------------------------------------------------------
    63                              <1> %macro mWriteSpace 0-1.nolist 1
    64                              <1> ;
    65                              <1> ; Writes one or more spaces to standard output.
    66                              <1> ; Receives: an integer specifying the number of spaces.
    67                              <1> ;   If count is blank, a single space is written.
    68                              <1> ;------------------------------------------------------
    69                              <1> segment .data
    70                              <1> %%spaces: times %1 db ' '
    71                              <1> 	db 0
    72                              <1> segment .text
    73                              <1> 	push	rdx
    74                              <1> 	mov	rdx, %%spaces
    75                              <1> 	call	WriteString
    76                              <1> 	pop	rdx
    77                              <1> %endmacro
    78                              <1> %endif
    79                              <1> 
    80                              <1> 
    81                              <1> %ifnmacro mShowRegister
    82                              <1> ;---------------------------------------------------
    83                              <1> %macro mShowRegister 2.nolist
    84                              <1> ;
    85                              <1> ; Displays a 64-bit register name and its contents.
    86                              <1> ; Receives: the register string name, the register.
    87                              <1> ; Returns:  nothing
    88                              <1> ;---------------------------------------------------
    89                              <1> segment .data
    90                              <1> %%tempStr: db "  ", %1,": ",0
    91                              <1> 
    92                              <1> segment .text
    93                              <1> 	push	rax		; save reg	
    94                              <1> 	push	rdx 		; save reg
    95                              <1> 	mov	rdx, %%tempStr	; display the register name
    96                              <1> 	call	WriteString
    97                              <1> 	pop	rdx		; restore reg
    98                              <1> 	mov	rax, %2		; display the reg contents in hex
    99                              <1> 	call	WriteHex
   100                              <1> 	pop	rax             ; restore reg
   101                              <1> %endmacro
   102                              <1> %endif
   103                              <1> 
   104                              <1> 
   105                              <1> %ifnmacro ShowFlag
   106                              <1> ;---------------------------------------------------------------------
   107                              <1> %macro ShowFlag 2.nolist
   108                              <1> ;
   109                              <1> ; Helper macro.
   110                              <1> ; Display a single CPU flag value
   111                              <1> ; Directly accesses the eflags variable in Along32.asm
   112                              <1> ; (This macro cannot be placed in Macros.inc)
   113                              <1> ;---------------------------------------------------------------------
   114                              <1> segment .data
   115                              <1> %%flagStr: db "  ",%1, "="
   116                              <1> %%flagVal: db 0,0
   117                              <1> 
   118                              <1> segment .text
   119                              <1> 	push rax
   120                              <1> 	push rdx
   121                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   122                              <1> 	mov  byte [%%flagVal],'1'
   123                              <1> 	shr  rax, %2			; shift into carry flag
   124                              <1> 	jc   %%L1
   125                              <1> 	mov  byte [%%flagVal],'0'
   126                              <1> %%L1:
   127                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   128                              <1> 	call WriteString
   129                              <1> 	pop  rdx
   130                              <1> 	pop  rax
   131                              <1> %endmacro
   132                              <1> %endif
   133                              <1> 
   134                              <1> 
   135                              <1> %ifnmacro ShowCC
   136                              <1> ;---------------------------------------------------------------------
   137                              <1> %macro ShowCC 2.nolist
   138                              <1> ;
   139                              <1> ; Helper macro.
   140                              <1> ; Display a single Condition Code Eflag name and value
   141                              <1> ; Directly accesses the eflags variable.
   142                              <1> ; 
   143                              <1> ;---------------------------------------------------------------------
   144                              <1> segment .data
   145                              <1> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   146                              <1> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   147                              <1> 
   148                              <1> segment .text
   149                              <1> 	push rax  		; save reg
   150                              <1> 	push rdx		; save reg
   151                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   152                              <1> 	mov  byte [%%flagVal],'1'	; ON
   153                              <1> 	shr  rax, %2		; shift into carry flag
   154                              <1> 	jc   %%L1
   155                              <1> 	mov  byte [%%flagVal],'0'	; OFF
   156                              <1> %%L1:
   157                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   158                              <1> 	call WriteString
   159                              <1> 	call Crlf		; line feed
   160                              <1> 	pop  rdx		; restore reg
   161                              <1> 	pop  rax		; restore reg
   162                              <1> %endmacro
   163                              <1> %endif
   164                              <1> 
   165                              <1> 
   166                              <1> 
   167                              <1> %ifnmacro CheckInit
   168                              <1> ;-------------------------------------------------------------
   169                              <1> %macro CheckInit 0.nolist
   170                              <1> ;
   171                              <1> ; Helper macro
   172                              <1> ; Check to see if the console handles have been initialized
   173                              <1> ; If not, initialize them now.
   174                              <1> ;-------------------------------------------------------------
   175                              <1> 	cmp byte [InitFlag],0
   176                              <1> 	jne %%exit
   177                              <1> 	mov byte [InitFlag],1
   178                              <1> 	call BufferFlush
   179                              <1> %%exit:
   180                              <1> %endmacro
   181                              <1> %endif
   182                              <1> 
   183                              <1> 
   184                              <1> %ifnmacro SaveRegs
   185                              <1> ;-------------------------------------------------------------
   186                              <1> %macro SaveRegs 0.nolist
   187                              <1> ;
   188                              <1> ; Convenience macro
   189                              <1> ; Save Registers
   190                              <1> ; PUSH the 16 general purpose regs to the stack.
   191                              <1> ;-------------------------------------------------------------
   192                              <1>        push rax
   193                              <1>        push rbx 
   194                              <1>        push rcx
   195                              <1>        push rdx
   196                              <1>        push rsi
   197                              <1>        push rdi
   198                              <1>        push rbp
   199                              <1>        push rsp
   200                              <1>        push r8 	
   201                              <1>        push r9  
   202                              <1>        push r10
   203                              <1>        push r11
   204                              <1>        push r12
   205                              <1>        push r13
   206                              <1>        push r14
   207                              <1>        push r15
   208                              <1> %%exit:
   209                              <1> %endmacro
   210                              <1> %endif
   211                              <1> 
   212                              <1> %ifnmacro RestoreRegs
   213                              <1> ;-------------------------------------------------------------
   214                              <1> %macro RestoreRegs 0.nolist
   215                              <1> ;
   216                              <1> ; Convenience macro
   217                              <1> ; Restore Registers
   218                              <1> ; POP the 16 general purpose regs from the stack.
   219                              <1> ;-------------------------------------------------------------
   220                              <1> 	pop r15
   221                              <1> 	pop r14
   222                              <1> 	pop r13
   223                              <1>      	pop r12
   224                              <1> 	pop r11 
   225                              <1> 	pop r10
   226                              <1>      	pop r9 
   227                              <1>      	pop r8 
   228                              <1> 	pop rsp
   229                              <1>       	pop rbp 
   230                              <1>       	pop rdi
   231                              <1>       	pop rsi
   232                              <1>       	pop rdx
   233                              <1>       	pop rcx 
   234                              <1>       	pop rbx
   235                              <1>       	pop rax
   236                              <1> %%exit:
   237                              <1> %endmacro
   238                              <1> %endif
   239                              <1> 
   240                              <1> ; Termination Macro
   241                              <1> ;-------------------------------------------------------------
   242                              <1> ;
   243                              <1> ; Convenience macro
   244                              <1> ; Exit to operating system under Linux.
   245                              <1> ;-------------------------------------------------------------
   246                              <1> %ifnmacro Exit
   247                              <1> %macro Exit 0.nolist  
   248                              <1>      mov rax, 60
   249                              <1>      xor rdi, rdi
   250                              <1>      syscall
   251                              <1> %%exit:
   252                              <1> %endmacro
   253                              <1> %endif
   254                              <1> 
   255                              <1> ; Termination Macro
   256                              <1> %ifnmacro CPexit
   257                              <1> ;-------------------------------------------------------------
   258                              <1> ;
   259                              <1> ; Convenience macro
   260                              <1> ; Exit to operating system under Linux.
   261                              <1> ;-------------------------------------------------------------
   262                              <1> %macro CPexit 0-1.nolist  
   263                              <1>      mov rax, 60
   264                              <1>      xor rdi, rdi
   265                              <1>      syscall
   266                              <1> %%exit:
   267                              <1> %endmacro
   268                              <1> %endif
   269                              <1> 
   270                              <1> %endif  ;End of Macro Definitions
     5                                  %include "CPsub64.inc"
     6                              <1> ; Last update: 2019/08/20
     7                              <1> 
     8                              <1> %ifndef CPSUB64
     9                              <1> %define CPSUB64
    10                              <1> 
    11                              <1> ; ------------------------------------------
    12                              <1> ; function prototypes
    13                              <1> ; ------------------------------------------
    14                              <1> extern Clearscr
    15                              <1> extern CloseFile
    16                              <1> extern Crlf
    17                              <1> extern ClearBuffer
    18                              <1> extern Delay
    19                              <1> extern DumpMem
    20                              <1> extern DumpCC
    21                              <1> extern DumpEflags
    22                              <1> extern DumpRegs
    23                              <1> extern IsDigit
    24                              <1> extern Mvcl
    25                              <1> extern FileOpen
    26                              <1> extern FileClose
    27                              <1> extern FileRead
    28                              <1> extern FileWrite
    29                              <1> extern ParseDecimal32
    30                              <1> extern ParseInteger32
    31                              <1> extern ParseDecimal64
    32                              <1> extern ParseInteger64
    33                              <1> extern ReadChar
    34                              <1> extern ReadDec
    35                              <1> extern ReadHex
    36                              <1> extern ReadInt
    37                              <1> extern ReadKey
    38                              <1> extern ReadString
    39                              <1> extern ReadStr
    40                              <1> extern Str_compare
    41                              <1> extern Str_copy
    42                              <1> extern Str_length
    43                              <1> extern StrLength
    44                              <1> extern Str_trim
    45                              <1> extern Str_ucase
    46                              <1> extern WriteBin
    47                              <1> extern WriteBinB
    48                              <1> extern WriteChar
    49                              <1> extern WriteDec
    50                              <1> extern WriteHex
    51                              <1> extern WriteHexDbl
    52                              <1> extern WriteHexB
    53                              <1> extern WriteInt
    54                              <1> extern WriteString
    55                              <1> ; ------------------------------------------
    56                              <1> 
    57                              <1> %endif
     6                                  
     7                                  global	main	; global entry point export for ld
     8                                  
     9                                  section .data
    10 00000000 50726F6772616D2074-     eopmsg	db	"Program terminating.",00h
    10 00000009 65726D696E6174696E-
    10 00000012 672E00             
    11 00000015 546865206E756D6265-     negmsg	db	"The number must be positive.",00h	; remember null terminators
    11 0000001E 72206D757374206265-
    11 00000027 20706F736974697665-
    11 00000030 2E00               
    12 00000032 506C6561736520656E-     prompt	db	"Please enter the quantity of fibonacci numbers you'd like: ",00h
    12 0000003B 746572207468652071-
    12 00000044 75616E74697479206F-
    12 0000004D 66206669626F6E6163-
    12 00000056 6369206E756D626572-
    12 0000005F 7320796F752764206C-
    12 00000068 696B653A2000       
    13 0000006E 20<rep FFh>             ipbuf	times	255 db	20h 	; define buffer of whitespace
    14                                  ipbufln	equ	$-ipbuf
    15 0000016D 496E74656765722069-     invmsg	db	"Integer is not valid. Please try again."
    15 00000176 73206E6F742076616C-
    15 0000017F 69642E20506C656173-
    15 00000188 652074727920616761-
    15 00000191 696E2E             
    16                                  
    17                                  section .text
    18                                  
    19                                  ;------------------------------------------------------
    20                                  ; SUBROUTINE: fpcvt
    21                                  ; INPUTS: One IEEE-754 encoded floating point number
    22                                  ; OUTPUTS: One string-encoded decimal floating point number
    23                                  ; A probably fairly complicated bit hack to manually convert since I can't find any
    24                                  ; instructions or libraries to do it for me.
    25                                  fpcvt:
    26                                  	; subroutine prologue
    27 00000000 55                      	push	rbp	; save caller base pointer
    28 00000001 4889E5                  	mov	rbp, rsp; new base pointer
    29 00000004 4883EC10                	sub	rsp, 2*8; allocate x local vars if needed
    30 00000008 50                      	push	rax
    31 00000009 53                      	push	rbx	; save working regs
    32                                  
    33                                  	; subroutine body
    34                                  	; fetch parameter into RAX
    35 0000000A 488B4510                	mov	rax, [rbp + 2*8]
    36                                  	; while technically signed, our float will *always* be positive, so
    37                                  	; I don't care about the sign bit
    38                                  	; next, parse exponent
    39                                  	; make bitmask for only the first 12 bits minus the sign bit -- 
    40                                  	; 01111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000
    41 0000000E 48894508                	mov	[rbp + 8], rax	; save rax as local var
    42 00000012 4883E000                	and	rax, 0x7FF0000000000000
    42          ******************       warning: signed dword value exceeds bounds [-w+number-overflow]
    43 00000016 48C1E80D                	shr	rax, 13	; bitshift 13 to the right
    44 0000001A 482DFF030000            	sub	rax, 1023 ; unbias exponent (double exponent bias is 1023)
    45                                  	; exponent now in RAX
    46 00000020 488B5DF8                	mov	rbx, [rbp - 8] ; copy original from local var into RBX
    47                                  	; bitmask for final 52 bits
    48                                  	; 0x000FFFFFFFFFFFFF
    49 00000024 4883E3FF                	and	rbx, 0x000FFFFFFFFFFFFF; rbx now contains mantissa or fractional significand
    49          ******************       warning: signed dword value exceeds bounds [-w+number-overflow]
    50                                  	; no bitshift needed	
    51                                  	; need a test of the endianness of the mantissa
    52 00000028 488945F0                	mov	[rbp - 16], rax	; second local variable now contains exponent
    53 0000002C 4889D8                  	mov	rax, rbx
    54 0000002F E8(00000000)            	call	WriteInt
    55                                  
    56                                  	; subroutine epilogue
    57 00000034 5B                      	pop rbx
    58 00000035 58                      	pop rax
    59 00000036 4883C410                	add	rsp, 2*8; deallocate x local vars
    60 0000003A 4889EC                  	mov	rsp, rbp
    61 0000003D 5D                      	pop	rbp
    62 0000003E C3                      	ret
    63                                  ;
    64                                  ;-------------------------------------------------------
    65                                  
    66                                  ;-------------------------------------------------------
    67                                  ; SUBROUTINE: phi
    68                                  ; INPUTS: two integers fib(n-1) and fib(n)
    69                                  ; OUTPUTS: approximation of phi in RCX
    70                                  ; Uses SSE registers because I can't be bothered to bit-hack my way to infinitely more accurate values of phi
    71                                  ; On x86-64 Unix *all* SSE registers are scratch registers -- I have no responsibility to save any of them.
    72                                  phi:
    73                                  	; subroutine prologue
    74 0000003F 55                      	push	rbp	; save caller base pointer
    75 00000040 4889E5                  	mov	rbp, rsp; new base pointer
    76                                  	;sub	rsp, x*8; allocate x local vars if needed
    77 00000043 50                      	push	rax
    78 00000044 53                      	push	rbx
    79                                  
    80                                  	; subroutine body
    81 00000045 488B4510                	mov	rax, [rbp + 2*8]; retrieve param 1 (fib(n-1))
    82 00000049 488B5D18                	mov	rbx, [rbp + 3*8]; retrieve param 2 (fib(n))
    83                                  	; convert integers to double-precision floats
    84 0000004D F2480F2AC0              	cvtsi2sd xmm0, rax; cvtsi2sd = convert signed integer to signed double
    85 00000052 F2480F2ACB              	cvtsi2sd xmm1, rbx
    86                                  	; now divide them
    87 00000057 F20F5EC1                	divsd	xmm0, xmm1 ; divide signed double
    88                                  	; result now stored as double-precision floating point in xmm0
    89                                  	; now move it to a general-purpose register so it can be used by the rest of the program
    90                                  	; *without* clobbering the floating-pointedness
    91 0000005B 66480F7EC1              	movq	rcx, xmm0	; move quadword
    92                                  	; done
    93                                  
    94                                  	; subroutine epilogue
    95 00000060 5B                      	pop	rbx
    96 00000061 58                      	pop	rax
    97                                  	;add	rsp, x*8; deallocate local vars
    98 00000062 4889EC                  	mov	rsp, rbp
    99 00000065 5D                      	pop	rbp
   100 00000066 C3                      	ret
   101                                  
   102                                  ;--------------------------------------------------------
   103                                  
   104                                  ;--------------------------------------------------------
   105                                  ; SUBROUTINE: fib
   106                                  ; INPUTS: Quantity
   107                                  ; OUTPUTS: Requested numbers in RAX
   108                                  fib:
   109                                  	; subroutine prologue
   110 00000067 55                      	push	rbp	; save caller base pointer
   111 00000068 4889E5                  	mov	rbp, rsp; new base pointer
   112 0000006B 4883EC18                	sub	rsp, 3*8; allocate 3 local vars on stack
   113 0000006F 53                      	push	rbx	; save caller regs
   114 00000070 51                      	push	rcx	; for use as working regs
   115                                  	
   116                                  	; subroutine body
   117 00000071 488B4510                	mov	rax, [rbp + 2*8]; retrieve parameter
   118 00000075 4883F801                	cmp	rax, 1		; if n = 1
   119 00000079 7E34                    	jle	return		; return from subroutine
   120                                  				; else, continue
   121 0000007B BB01000000              	mov	rbx, 1
   122 00000080 B902000000              	mov	rcx, 2
   123 00000085 50                      	push 	rax	; preserve original value of RAX
   124 00000086 4829D8                  	sub	rax, rbx	; n - 1
   125 00000089 4889C3                  	mov	rbx, rax	; rbx should hold n - 1 value
   126 0000008C 58                      	pop	rax		; restore value of RAX
   127 0000008D 4829C8                  	sub	rax, rcx	; n - 2
   128 00000090 4889C1                  	mov	rcx, rax	; rcx should hold n - 2 value
   129 00000093 53                      	push	rbx		; pass n - 1 to fib()
   130 00000094 E8CEFFFFFF              	call	fib
   131 00000099 5B                      	pop	rbx
   132 0000009A 4889C3                  	mov	rbx, rax	; fib(n - 1) now in RBX
   133 0000009D 51                      	push	rcx		; pass n - 2 to fib()
   134 0000009E E8C4FFFFFF              	call	fib
   135 000000A3 59                      	pop 	rcx
   136 000000A4 4889C1                  	mov	rcx, rax	; fib(n - 2) now in RCX
   137                                  				; yeah, yeah, I could just use RAX, but this is more readable
   138                                  	
   139 000000A7 4801CB                  	add	rbx, rcx	; fib(n - 1) + fib(n - 2)
   140 000000AA 4889D8                  	mov	rax, rbx	; move result of fib function to RAX for return
   141 000000AD EB00                    	jmp	return
   142                                  	
   143                                  return	equ	$
   144                                  	; subroutine epilogue
   145 000000AF 59                      	pop	rcx		; restore caller regs
   146 000000B0 5B                      	pop	rbx	
   147 000000B1 4883C418                	add	rsp, 3*8	; clear stack of local var allocations
   148 000000B5 4889EC                  	mov	rsp, rbp	; restore caller stack pointer
   149 000000B8 5D                      	pop	rbp	; restore caller base pointer
   150 000000B9 C3                      	ret	; return from subroutine with result in RAX
   151                                  	
   152                                  	
   153                                  	
   154                                  ; END SUBROUTINE: fib
   155                                  ;--------------------------------------------------------
   156                                  
   157                                  main:
   158                                  
   159                                  ; keep looping until user quits
   160                                  loopnt	equ	$
   161 000000BA E8(00000000)            	call	Crlf
   162                                  
   163 000000BF 48BA-                   	mov	rdx, prompt	; write user prompt
   163 000000C1 [3200000000000000] 
   164 000000C9 E8(00000000)            	call	WriteString
   165 000000CE E8(00000000)            	call	Crlf
   166                                  
   167 000000D3 48BA-                   	mov	rdx, ipbuf	; address data buffer
   167 000000D5 [6E00000000000000] 
   168 000000DD B9FF000000              	mov	rcx, ipbufln	; limit data
   169 000000E2 E8(00000000)            	call	ReadString	; perform keyboard read
   170 000000E7 48BA-                   	mov	rdx, ipbuf	; address numeral input area
   170 000000E9 [6E00000000000000] 
   171 000000F1 4889C1                  	mov	rcx, rax	; numeral count
   172 000000F4 E8(00000000)            	call	ParseInteger64	; parse signed binary from input, returned in RAX
   173 000000F9 4883F800                	cmp	rax, 0 ; return of 0 from RAX indicates invalid input
   174 000000FD 745A                    	je	invalid
   175 000000FF 7C71                    	jl	negnum	; causes infinite loop
   176 00000101 4989C0                  	mov	r8, rax	; preserve original user input
   177                                  	; indenting for ease of reading
   178 00000104 41BF01000000            	mov	r15, 1	; loop iterator variable
   179                                  	fibloop	equ	$
   180                                  		
   181 0000010A 4157                    		push	r15	; fib(R15)
   182 0000010C E856FFFFFF              		call	fib
   183 00000111 4883C408                		add	rsp, 8*1; clear R15 from stack
   184                                  		; whaddaya know, fib() also returns RAX
   185 00000115 E8(00000000)            		call	WriteInt	; print fib(n)
   186 0000011A E8(00000000)            		call	Crlf
   187 0000011F 4D39C7                  		cmp	r15, r8		; compare user input w/ loop iterator
   188 00000122 7405                    		je	goldrat		; if equal, leave loop
   189 00000124 49FFC7                  		inc	r15		; else, increment iterator + continue
   190 00000127 EBE1                    		jmp	fibloop		; loop again
   191                                  	; once more for golden ratio
   192                                  goldrat	equ	$
   193 00000129 4150                    	push	r8
   194 0000012B E837FFFFFF              	call	fib
   195 00000130 4883C408                	add	rsp, 8*1; clear r8 from stack
   196 00000134 4889C3                  	mov	rbx, rax
   197 00000137 4150                    	push	r8
   198 00000139 E829FFFFFF              	call	fib
   199 0000013E 4883C408                	add	rsp, 8*1
   200 00000142 50                      	push	rax
   201 00000143 53                      	push 	rbx
   202 00000144 E8F6FEFFFF              	call	phi
   203 00000149 4883C410                	add	rsp, 8*2
   204 0000014D 51                      	push	rcx
   205 0000014E E8ADFEFFFF              	call	fpcvt
   206 00000153 4883C408                	add	rsp, 8*1
   207 00000157 EB32                    	jmp	term	
   208                                  
   209                                  invalid	equ	$
   210 00000159 48BA-                   	mov	rdx, invmsg	; write invalid message
   210 0000015B [6D01000000000000] 
   211 00000163 E8(00000000)            	call	WriteString
   212 00000168 E8(00000000)            	call	Crlf
   213 0000016D E948FFFFFF              	jmp	loopnt		; loop back to beginning of subroutine
   214                                  
   215                                  negnum	equ	$
   216 00000172 48BA-                   	mov	rdx, negmsg	; write negative numbers message
   216 00000174 [1500000000000000] 
   217 0000017C E8(00000000)            	call	WriteString
   218 00000181 E8(00000000)            	call	Crlf
   219 00000186 E92FFFFFFF              	jmp	loopnt		; loop back to beginning of subroutine
   220                                  
   221                                  term	equ	$
   222 0000018B 48BA-                   	mov	rdx, eopmsg	; address message
   222 0000018D [0000000000000000] 
   223 00000195 E8(00000000)            	call	WriteString
   224 0000019A E8(00000000)            	call	Crlf
   225 0000019F B83C0000004831FF0F-     	Exit
   225 000001A8 05                 
   226                                  
   227                                  
   228                                  
