     1                                  ; AUTHOR: Connor McDermid
     2                                  ; DATE: 2021-11-05
     3                                  ; 64-bit Lab 7 "fibonacci"
     4                                  %include "Macros_CPsub64.inc"
     5                              <1> ;--------------------------- MACROS ------------------------------------------
     6                              <1> ; Change Log:
     7                              <1> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     8                              <1> ;
     9                              <1> ;
    10                              <1> ;-----------------------------------------------------------------------------
    11                              <1> %ifndef MACRO_CPSUB64
    12                              <1> %define MACRO_CPSUB64
    13                              <1> 
    14                              <1> %define STDIN  0
    15                              <1> %define STDOUT 1
    16                              <1> %define STDERR 2
    17                              <1> 
    18                              <1> %define TAB 09h
    19                              <1> %define NL 0Ah
    20                              <1> 
    21                              <1> ; define the timespec structure used in nanosleep
    22                              <1> struc timespec
    23 00000000 ????????            <1>      tv_sec: resd 1
    24 00000004 ????????            <1>      tv_nsec: resd 1
    25                              <1> endstruc
    26                              <1> 
    27                              <1> 
    28                              <1> ; Synonym for NASM invoke
    29                              <1> %ifnmacro INVOKE
    30                              <1> %macro INVOKE 1-*.nolist
    31                              <1>      %rep %0 - 1
    32                              <1>      %rotate -1
    33                              <1>      push qword %1
    34                              <1>      %endrep
    35                              <1>      %rotate -1
    36                              <1>      call %1
    37                              <1>      add rsp, ( %0 - 1 ) * 8
    38                              <1> %endmacro
    39                              <1> %endif
    40                              <1> 
    41                              <1> 
    42                              <1> %ifnmacro mWrite
    43                              <1> ;------------------------------------------------------
    44                              <1> %macro mWrite 1.nolist
    45                              <1> ;
    46                              <1> ; Writes a string literal to standard output.
    47                              <1> ; Receives: a string enclosed in single or double 
    48                              <1> ;   quotes (null terminator not required).
    49                              <1> ;------------------------------------------------------
    50                              <1> segment .data
    51                              <1> 	%%string: db %1, 0
    52                              <1> segment .text
    53                              <1> 	push	rdx
    54                              <1> 	mov	rdx,%%string
    55                              <1>  	call	WriteString
    56                              <1>  	pop	rdx
    57                              <1> %endmacro
    58                              <1> %endif
    59                              <1> 
    60                              <1> 
    61                              <1> %ifnmacro mWriteSpace
    62                              <1> ;------------------------------------------------------
    63                              <1> %macro mWriteSpace 0-1.nolist 1
    64                              <1> ;
    65                              <1> ; Writes one or more spaces to standard output.
    66                              <1> ; Receives: an integer specifying the number of spaces.
    67                              <1> ;   If count is blank, a single space is written.
    68                              <1> ;------------------------------------------------------
    69                              <1> segment .data
    70                              <1> %%spaces: times %1 db ' '
    71                              <1> 	db 0
    72                              <1> segment .text
    73                              <1> 	push	rdx
    74                              <1> 	mov	rdx, %%spaces
    75                              <1> 	call	WriteString
    76                              <1> 	pop	rdx
    77                              <1> %endmacro
    78                              <1> %endif
    79                              <1> 
    80                              <1> 
    81                              <1> %ifnmacro mShowRegister
    82                              <1> ;---------------------------------------------------
    83                              <1> %macro mShowRegister 2.nolist
    84                              <1> ;
    85                              <1> ; Displays a 64-bit register name and its contents.
    86                              <1> ; Receives: the register string name, the register.
    87                              <1> ; Returns:  nothing
    88                              <1> ;---------------------------------------------------
    89                              <1> segment .data
    90                              <1> %%tempStr: db "  ", %1,": ",0
    91                              <1> 
    92                              <1> segment .text
    93                              <1> 	push	rax		; save reg	
    94                              <1> 	push	rdx 		; save reg
    95                              <1> 	mov	rdx, %%tempStr	; display the register name
    96                              <1> 	call	WriteString
    97                              <1> 	pop	rdx		; restore reg
    98                              <1> 	mov	rax, %2		; display the reg contents in hex
    99                              <1> 	call	WriteHex
   100                              <1> 	pop	rax             ; restore reg
   101                              <1> %endmacro
   102                              <1> %endif
   103                              <1> 
   104                              <1> 
   105                              <1> %ifnmacro ShowFlag
   106                              <1> ;---------------------------------------------------------------------
   107                              <1> %macro ShowFlag 2.nolist
   108                              <1> ;
   109                              <1> ; Helper macro.
   110                              <1> ; Display a single CPU flag value
   111                              <1> ; Directly accesses the eflags variable in Along32.asm
   112                              <1> ; (This macro cannot be placed in Macros.inc)
   113                              <1> ;---------------------------------------------------------------------
   114                              <1> segment .data
   115                              <1> %%flagStr: db "  ",%1, "="
   116                              <1> %%flagVal: db 0,0
   117                              <1> 
   118                              <1> segment .text
   119                              <1> 	push rax
   120                              <1> 	push rdx
   121                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   122                              <1> 	mov  byte [%%flagVal],'1'
   123                              <1> 	shr  rax, %2			; shift into carry flag
   124                              <1> 	jc   %%L1
   125                              <1> 	mov  byte [%%flagVal],'0'
   126                              <1> %%L1:
   127                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   128                              <1> 	call WriteString
   129                              <1> 	pop  rdx
   130                              <1> 	pop  rax
   131                              <1> %endmacro
   132                              <1> %endif
   133                              <1> 
   134                              <1> 
   135                              <1> %ifnmacro ShowCC
   136                              <1> ;---------------------------------------------------------------------
   137                              <1> %macro ShowCC 2.nolist
   138                              <1> ;
   139                              <1> ; Helper macro.
   140                              <1> ; Display a single Condition Code Eflag name and value
   141                              <1> ; Directly accesses the eflags variable.
   142                              <1> ; 
   143                              <1> ;---------------------------------------------------------------------
   144                              <1> segment .data
   145                              <1> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   146                              <1> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   147                              <1> 
   148                              <1> segment .text
   149                              <1> 	push rax  		; save reg
   150                              <1> 	push rdx		; save reg
   151                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   152                              <1> 	mov  byte [%%flagVal],'1'	; ON
   153                              <1> 	shr  rax, %2		; shift into carry flag
   154                              <1> 	jc   %%L1
   155                              <1> 	mov  byte [%%flagVal],'0'	; OFF
   156                              <1> %%L1:
   157                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   158                              <1> 	call WriteString
   159                              <1> 	call Crlf		; line feed
   160                              <1> 	pop  rdx		; restore reg
   161                              <1> 	pop  rax		; restore reg
   162                              <1> %endmacro
   163                              <1> %endif
   164                              <1> 
   165                              <1> 
   166                              <1> 
   167                              <1> %ifnmacro CheckInit
   168                              <1> ;-------------------------------------------------------------
   169                              <1> %macro CheckInit 0.nolist
   170                              <1> ;
   171                              <1> ; Helper macro
   172                              <1> ; Check to see if the console handles have been initialized
   173                              <1> ; If not, initialize them now.
   174                              <1> ;-------------------------------------------------------------
   175                              <1> 	cmp byte [InitFlag],0
   176                              <1> 	jne %%exit
   177                              <1> 	mov byte [InitFlag],1
   178                              <1> 	call BufferFlush
   179                              <1> %%exit:
   180                              <1> %endmacro
   181                              <1> %endif
   182                              <1> 
   183                              <1> 
   184                              <1> %ifnmacro SaveRegs
   185                              <1> ;-------------------------------------------------------------
   186                              <1> %macro SaveRegs 0.nolist
   187                              <1> ;
   188                              <1> ; Convenience macro
   189                              <1> ; Save Registers
   190                              <1> ; PUSH the 16 general purpose regs to the stack.
   191                              <1> ;-------------------------------------------------------------
   192                              <1>        push rax
   193                              <1>        push rbx 
   194                              <1>        push rcx
   195                              <1>        push rdx
   196                              <1>        push rsi
   197                              <1>        push rdi
   198                              <1>        push rbp
   199                              <1>        push rsp
   200                              <1>        push r8 	
   201                              <1>        push r9  
   202                              <1>        push r10
   203                              <1>        push r11
   204                              <1>        push r12
   205                              <1>        push r13
   206                              <1>        push r14
   207                              <1>        push r15
   208                              <1> %%exit:
   209                              <1> %endmacro
   210                              <1> %endif
   211                              <1> 
   212                              <1> %ifnmacro RestoreRegs
   213                              <1> ;-------------------------------------------------------------
   214                              <1> %macro RestoreRegs 0.nolist
   215                              <1> ;
   216                              <1> ; Convenience macro
   217                              <1> ; Restore Registers
   218                              <1> ; POP the 16 general purpose regs from the stack.
   219                              <1> ;-------------------------------------------------------------
   220                              <1> 	pop r15
   221                              <1> 	pop r14
   222                              <1> 	pop r13
   223                              <1>      	pop r12
   224                              <1> 	pop r11 
   225                              <1> 	pop r10
   226                              <1>      	pop r9 
   227                              <1>      	pop r8 
   228                              <1> 	pop rsp
   229                              <1>       	pop rbp 
   230                              <1>       	pop rdi
   231                              <1>       	pop rsi
   232                              <1>       	pop rdx
   233                              <1>       	pop rcx 
   234                              <1>       	pop rbx
   235                              <1>       	pop rax
   236                              <1> %%exit:
   237                              <1> %endmacro
   238                              <1> %endif
   239                              <1> 
   240                              <1> ; Termination Macro
   241                              <1> ;-------------------------------------------------------------
   242                              <1> ;
   243                              <1> ; Convenience macro
   244                              <1> ; Exit to operating system under Linux.
   245                              <1> ;-------------------------------------------------------------
   246                              <1> %ifnmacro Exit
   247                              <1> %macro Exit 0.nolist  
   248                              <1>      mov rax, 60
   249                              <1>      xor rdi, rdi
   250                              <1>      syscall
   251                              <1> %%exit:
   252                              <1> %endmacro
   253                              <1> %endif
   254                              <1> 
   255                              <1> ; Termination Macro
   256                              <1> %ifnmacro CPexit
   257                              <1> ;-------------------------------------------------------------
   258                              <1> ;
   259                              <1> ; Convenience macro
   260                              <1> ; Exit to operating system under Linux.
   261                              <1> ;-------------------------------------------------------------
   262                              <1> %macro CPexit 0-1.nolist  
   263                              <1>      mov rax, 60
   264                              <1>      xor rdi, rdi
   265                              <1>      syscall
   266                              <1> %%exit:
   267                              <1> %endmacro
   268                              <1> %endif
   269                              <1> 
   270                              <1> %endif  ;End of Macro Definitions
     5                                  %include "CPsub64.inc"
     6                              <1> ; Last update: 2019/08/20
     7                              <1> 
     8                              <1> %ifndef CPSUB64
     9                              <1> %define CPSUB64
    10                              <1> 
    11                              <1> ; ------------------------------------------
    12                              <1> ; function prototypes
    13                              <1> ; ------------------------------------------
    14                              <1> extern Clearscr
    15                              <1> extern CloseFile
    16                              <1> extern Crlf
    17                              <1> extern ClearBuffer
    18                              <1> extern Delay
    19                              <1> extern DumpMem
    20                              <1> extern DumpCC
    21                              <1> extern DumpEflags
    22                              <1> extern DumpRegs
    23                              <1> extern IsDigit
    24                              <1> extern Mvcl
    25                              <1> extern FileOpen
    26                              <1> extern FileClose
    27                              <1> extern FileRead
    28                              <1> extern FileWrite
    29                              <1> extern ParseDecimal32
    30                              <1> extern ParseInteger32
    31                              <1> extern ParseDecimal64
    32                              <1> extern ParseInteger64
    33                              <1> extern ReadChar
    34                              <1> extern ReadDec
    35                              <1> extern ReadHex
    36                              <1> extern ReadInt
    37                              <1> extern ReadKey
    38                              <1> extern ReadString
    39                              <1> extern ReadStr
    40                              <1> extern Str_compare
    41                              <1> extern Str_copy
    42                              <1> extern Str_length
    43                              <1> extern StrLength
    44                              <1> extern Str_trim
    45                              <1> extern Str_ucase
    46                              <1> extern WriteBin
    47                              <1> extern WriteBinB
    48                              <1> extern WriteChar
    49                              <1> extern WriteDec
    50                              <1> extern WriteHex
    51                              <1> extern WriteHexDbl
    52                              <1> extern WriteHexB
    53                              <1> extern WriteInt
    54                              <1> extern WriteString
    55                              <1> ; ------------------------------------------
    56                              <1> 
    57                              <1> %endif
     6                                  
     7                                  global	main	; global entry point export for ld
     8                                  
     9                                  section .data
    10 00000000 50726F6772616D2074-     eopmsg	db	"Program terminating.",00h
    10 00000009 65726D696E6174696E-
    10 00000012 672E00             
    11 00000015 506C6561736520656E-     prompt	db	"Please enter the quantity of fibonacci numbers you'd like: ",00h
    11 0000001E 746572207468652071-
    11 00000027 75616E74697479206F-
    11 00000030 66206669626F6E6163-
    11 00000039 6369206E756D626572-
    11 00000042 7320796F752764206C-
    11 0000004B 696B653A2000       
    12 00000051 20<rep FFh>             ipbuf	times	255 db	20h 	; define buffer of whitespace
    13                                  ipbufln	equ	$-ipbuf
    14 00000150 496E74656765722069-     invmsg	db	"Integer is not valid. Please try again."
    14 00000159 73206E6F742076616C-
    14 00000162 69642E20506C656173-
    14 0000016B 652074727920616761-
    14 00000174 696E2E             
    15                                  
    16                                  section .text
    17                                  
    18                                  ;--------------------------------------------------------
    19                                  ; SUBROUTINE: fib
    20                                  ; INPUTS: Quantity
    21                                  ; OUTPUTS: Requested numbers in RAX
    22                                  fib:
    23                                  	; subroutine prologue
    24 00000000 55                      	push	rbp	; save caller base pointer
    25 00000001 4889E5                  	mov	rbp, rsp; new base pointer
    26 00000004 4883EC18                	sub	rsp, 3*8; allocate 2 local vars on stack
    27 00000008 53                      	push	rbx	; save caller regs
    28 00000009 51                      	push	rcx	; for use as working regs
    29                                  	
    30                                  	; subroutine body
    31 0000000A 488B4510                	mov	rax, [rbp + 2*8]; retrieve parameter
    32 0000000E 4883F801                	cmp	rax, 1		; if n = 1
    33 00000012 7E34                    	jle	return		; return from subroutine
    34                                  				; else, continue
    35 00000014 BB01000000              	mov	rbx, 1
    36 00000019 B902000000              	mov	rcx, 2
    37 0000001E 50                      	push 	rax	; preserve original value of RAX
    38 0000001F 4829D8                  	sub	rax, rbx	; n - 1
    39 00000022 4889C3                  	mov	rbx, rax	; rbx should hold n - 1 value
    40 00000025 58                      	pop	rax		; restore value of RAX
    41 00000026 4829C8                  	sub	rax, rcx	; n - 2
    42 00000029 4889C1                  	mov	rcx, rax	; rcx should hold n - 2 value
    43 0000002C 53                      	push	rbx		; pass n - 1 to fib()
    44 0000002D E8CEFFFFFF              	call	fib
    45 00000032 5B                      	pop	rbx
    46 00000033 4889C3                  	mov	rbx, rax	; fib(n - 1) now in RBX
    47 00000036 51                      	push	rcx		; pass n - 2 to fib()
    48 00000037 E8C4FFFFFF              	call	fib
    49 0000003C 59                      	pop 	rcx
    50 0000003D 4889C1                  	mov	rcx, rax	; fib(n - 2) now in RCX
    51                                  				; yeah, yeah, I could just use RAX, but this is more readable
    52                                  	
    53 00000040 4801CB                  	add	rbx, rcx	; fib(n - 1) + fib(n - 2)
    54 00000043 4889D8                  	mov	rax, rbx	; move result of fib function to RAX for return
    55 00000046 EB00                    	jmp	return
    56                                  	
    57                                  return	equ	$
    58                                  	; subroutine epilogue
    59 00000048 59                      	pop	rcx		; restore caller regs
    60 00000049 5B                      	pop	rbx	
    61 0000004A 4883C418                	add	rsp, 3*8	; clear stack of local var allocations
    62 0000004E 4889EC                  	mov	rsp, rbp	; restore caller stack pointer
    63 00000051 5D                      	pop	rbp	; restore caller base pointer
    64 00000052 C3                      	ret	; return from subroutine with result in RAX
    65                                  	
    66                                  	
    67                                  	
    68                                  ; END SUBROUTINE: fib
    69                                  ;--------------------------------------------------------
    70                                  
    71                                  main:
    72                                  
    73                                  ; keep looping until user quits
    74                                  loopnt	equ	$
    75 00000053 E8(00000000)            	call	Crlf
    76                                  
    77 00000058 48BA-                   	mov	rdx, prompt	; write user prompt
    77 0000005A [1500000000000000] 
    78 00000062 E8(00000000)            	call	WriteString
    79 00000067 E8(00000000)            	call	Crlf
    80                                  
    81 0000006C 48BA-                   	mov	rdx, ipbuf	; address data buffer
    81 0000006E [5100000000000000] 
    82 00000076 B9FF000000              	mov	rcx, ipbufln	; limit data
    83 0000007B E8(00000000)            	call	ReadString	; perform keyboard read
    84 00000080 48BA-                   	mov	rdx, ipbuf	; address numeral input area
    84 00000082 [5100000000000000] 
    85 0000008A 4889C1                  	mov	rcx, rax	; numeral count
    86 0000008D E8(00000000)            	call	ParseInteger64	; parse signed binary from input
    87 00000092 7211                    	jc	invalid
    88                                  	; result already stored in RAX as return from ParseInteger64()
    89 00000094 50                      	push	rax	; fib(RAX)
    90 00000095 E866FFFFFF              	call	fib
    91 0000009A 4883C408                	add	rsp, 8*1; clear RAX from stack
    92                                  	; whaddaya know, fib() also returns RAX
    93 0000009E E8(00000000)            	call	WriteInt
    94 000000A3 EB16                    	jmp	term
    95                                  
    96                                  invalid	equ	$
    97 000000A5 48BA-                   	mov	rdx, invmsg	; write invalid message
    97 000000A7 [5001000000000000] 
    98 000000AF E8(00000000)            	call	WriteString
    99 000000B4 E8(00000000)            	call	Crlf
   100 000000B9 EB98                    	jmp	loopnt		; loop back to beginning of subroutine
   101                                  
   102                                  term	equ	$
   103 000000BB 48BA-                   	mov	rdx, eopmsg	; address message
   103 000000BD [0000000000000000] 
   104 000000C5 E8(00000000)            	call	WriteString
   105 000000CA E8(00000000)            	call	Crlf
   106 000000CF B83C0000004831FF0F-     	Exit
   106 000000D8 05                 
   107                                  
   108                                  
   109                                  
