     1                                  ; AUTHOR: Connor McDermid
     2                                  ; DATE: 2021-09-23
     3                                  ; 64-bit Lab 2 "numrep": 
     4                                  %include "Macros_CPsub64.inc"
     5                              <1> ;--------------------------- MACROS ------------------------------------------
     6                              <1> ; Change Log:
     7                              <1> ; 02-06-21 CP Rename ifndef for Exit from CPExit to Exit, update mShowRegister
     8                              <1> ;
     9                              <1> ;
    10                              <1> ;-----------------------------------------------------------------------------
    11                              <1> %ifndef MACRO_CPSUB64
    12                              <1> %define MACRO_CPSUB64
    13                              <1> 
    14                              <1> %define STDIN  0
    15                              <1> %define STDOUT 1
    16                              <1> %define STDERR 2
    17                              <1> 
    18                              <1> %define TAB 09h
    19                              <1> %define NL 0Ah
    20                              <1> 
    21                              <1> ; define the timespec structure used in nanosleep
    22                              <1> struc timespec
    23 00000000 ????????            <1>      tv_sec: resd 1
    24 00000004 ????????            <1>      tv_nsec: resd 1
    25                              <1> endstruc
    26                              <1> 
    27                              <1> 
    28                              <1> ; Synonym for NASM invoke
    29                              <1> %ifnmacro INVOKE
    30                              <1> %macro INVOKE 1-*.nolist
    31                              <1>      %rep %0 - 1
    32                              <1>      %rotate -1
    33                              <1>      push qword %1
    34                              <1>      %endrep
    35                              <1>      %rotate -1
    36                              <1>      call %1
    37                              <1>      add rsp, ( %0 - 1 ) * 8
    38                              <1> %endmacro
    39                              <1> %endif
    40                              <1> 
    41                              <1> 
    42                              <1> %ifnmacro mWrite
    43                              <1> ;------------------------------------------------------
    44                              <1> %macro mWrite 1.nolist
    45                              <1> ;
    46                              <1> ; Writes a string literal to standard output.
    47                              <1> ; Receives: a string enclosed in single or double 
    48                              <1> ;   quotes (null terminator not required).
    49                              <1> ;------------------------------------------------------
    50                              <1> segment .data
    51                              <1> 	%%string: db %1, 0
    52                              <1> segment .text
    53                              <1> 	push	rdx
    54                              <1> 	mov	rdx,%%string
    55                              <1>  	call	WriteString
    56                              <1>  	pop	rdx
    57                              <1> %endmacro
    58                              <1> %endif
    59                              <1> 
    60                              <1> 
    61                              <1> %ifnmacro mWriteSpace
    62                              <1> ;------------------------------------------------------
    63                              <1> %macro mWriteSpace 0-1.nolist 1
    64                              <1> ;
    65                              <1> ; Writes one or more spaces to standard output.
    66                              <1> ; Receives: an integer specifying the number of spaces.
    67                              <1> ;   If count is blank, a single space is written.
    68                              <1> ;------------------------------------------------------
    69                              <1> segment .data
    70                              <1> %%spaces: times %1 db ' '
    71                              <1> 	db 0
    72                              <1> segment .text
    73                              <1> 	push	rdx
    74                              <1> 	mov	rdx, %%spaces
    75                              <1> 	call	WriteString
    76                              <1> 	pop	rdx
    77                              <1> %endmacro
    78                              <1> %endif
    79                              <1> 
    80                              <1> 
    81                              <1> %ifnmacro mShowRegister
    82                              <1> ;---------------------------------------------------
    83                              <1> %macro mShowRegister 2.nolist
    84                              <1> ;
    85                              <1> ; Displays a 64-bit register name and its contents.
    86                              <1> ; Receives: the register string name, the register.
    87                              <1> ; Returns:  nothing
    88                              <1> ;---------------------------------------------------
    89                              <1> segment .data
    90                              <1> %%tempStr: db "  ", %1,": ",0
    91                              <1> 
    92                              <1> segment .text
    93                              <1> 	push	rax		; save reg	
    94                              <1> 	push	rdx 		; save reg
    95                              <1> 	mov	rdx, %%tempStr	; display the register name
    96                              <1> 	call	WriteString
    97                              <1> 	pop	rdx		; restore reg
    98                              <1> 	mov	rax, %2		; display the reg contents in hex
    99                              <1> 	call	WriteHex
   100                              <1> 	pop	rax             ; restore reg
   101                              <1> %endmacro
   102                              <1> %endif
   103                              <1> 
   104                              <1> 
   105                              <1> %ifnmacro ShowFlag
   106                              <1> ;---------------------------------------------------------------------
   107                              <1> %macro ShowFlag 2.nolist
   108                              <1> ;
   109                              <1> ; Helper macro.
   110                              <1> ; Display a single CPU flag value
   111                              <1> ; Directly accesses the eflags variable in Along32.asm
   112                              <1> ; (This macro cannot be placed in Macros.inc)
   113                              <1> ;---------------------------------------------------------------------
   114                              <1> segment .data
   115                              <1> %%flagStr: db "  ",%1, "="
   116                              <1> %%flagVal: db 0,0
   117                              <1> 
   118                              <1> segment .text
   119                              <1> 	push rax
   120                              <1> 	push rdx
   121                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   122                              <1> 	mov  byte [%%flagVal],'1'
   123                              <1> 	shr  rax, %2			; shift into carry flag
   124                              <1> 	jc   %%L1
   125                              <1> 	mov  byte [%%flagVal],'0'
   126                              <1> %%L1:
   127                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   128                              <1> 	call WriteString
   129                              <1> 	pop  rdx
   130                              <1> 	pop  rax
   131                              <1> %endmacro
   132                              <1> %endif
   133                              <1> 
   134                              <1> 
   135                              <1> %ifnmacro ShowCC
   136                              <1> ;---------------------------------------------------------------------
   137                              <1> %macro ShowCC 2.nolist
   138                              <1> ;
   139                              <1> ; Helper macro.
   140                              <1> ; Display a single Condition Code Eflag name and value
   141                              <1> ; Directly accesses the eflags variable.
   142                              <1> ; 
   143                              <1> ;---------------------------------------------------------------------
   144                              <1> segment .data
   145                              <1> %%flagStr: db "  ",%1," : "    	; flag name plus = sign
   146                              <1> %%flagVal: db 0,0         	; flag value if 0 or 1, plus NULL
   147                              <1> 
   148                              <1> segment .text
   149                              <1> 	push rax  		; save reg
   150                              <1> 	push rdx		; save reg
   151                              <1> 	mov  rax, qword [eflags]	; retrieve the flags
   152                              <1> 	mov  byte [%%flagVal],'1'	; ON
   153                              <1> 	shr  rax, %2		; shift into carry flag
   154                              <1> 	jc   %%L1
   155                              <1> 	mov  byte [%%flagVal],'0'	; OFF
   156                              <1> %%L1:
   157                              <1> 	mov  rdx, %%flagStr	; display flag name and value
   158                              <1> 	call WriteString
   159                              <1> 	call Crlf		; line feed
   160                              <1> 	pop  rdx		; restore reg
   161                              <1> 	pop  rax		; restore reg
   162                              <1> %endmacro
   163                              <1> %endif
   164                              <1> 
   165                              <1> 
   166                              <1> 
   167                              <1> %ifnmacro CheckInit
   168                              <1> ;-------------------------------------------------------------
   169                              <1> %macro CheckInit 0.nolist
   170                              <1> ;
   171                              <1> ; Helper macro
   172                              <1> ; Check to see if the console handles have been initialized
   173                              <1> ; If not, initialize them now.
   174                              <1> ;-------------------------------------------------------------
   175                              <1> 	cmp byte [InitFlag],0
   176                              <1> 	jne %%exit
   177                              <1> 	mov byte [InitFlag],1
   178                              <1> 	call BufferFlush
   179                              <1> %%exit:
   180                              <1> %endmacro
   181                              <1> %endif
   182                              <1> 
   183                              <1> 
   184                              <1> %ifnmacro SaveRegs
   185                              <1> ;-------------------------------------------------------------
   186                              <1> %macro SaveRegs 0.nolist
   187                              <1> ;
   188                              <1> ; Convenience macro
   189                              <1> ; Save Registers
   190                              <1> ; PUSH the 16 general purpose regs to the stack.
   191                              <1> ;-------------------------------------------------------------
   192                              <1>        push rax
   193                              <1>        push rbx 
   194                              <1>        push rcx
   195                              <1>        push rdx
   196                              <1>        push rsi
   197                              <1>        push rdi
   198                              <1>        push rbp
   199                              <1>        push rsp
   200                              <1>        push r8 	
   201                              <1>        push r9  
   202                              <1>        push r10
   203                              <1>        push r11
   204                              <1>        push r12
   205                              <1>        push r13
   206                              <1>        push r14
   207                              <1>        push r15
   208                              <1> %%exit:
   209                              <1> %endmacro
   210                              <1> %endif
   211                              <1> 
   212                              <1> %ifnmacro RestoreRegs
   213                              <1> ;-------------------------------------------------------------
   214                              <1> %macro RestoreRegs 0.nolist
   215                              <1> ;
   216                              <1> ; Convenience macro
   217                              <1> ; Restore Registers
   218                              <1> ; POP the 16 general purpose regs from the stack.
   219                              <1> ;-------------------------------------------------------------
   220                              <1> 	pop r15
   221                              <1> 	pop r14
   222                              <1> 	pop r13
   223                              <1>      	pop r12
   224                              <1> 	pop r11 
   225                              <1> 	pop r10
   226                              <1>      	pop r9 
   227                              <1>      	pop r8 
   228                              <1> 	pop rsp
   229                              <1>       	pop rbp 
   230                              <1>       	pop rdi
   231                              <1>       	pop rsi
   232                              <1>       	pop rdx
   233                              <1>       	pop rcx 
   234                              <1>       	pop rbx
   235                              <1>       	pop rax
   236                              <1> %%exit:
   237                              <1> %endmacro
   238                              <1> %endif
   239                              <1> 
   240                              <1> ; Termination Macro
   241                              <1> ;-------------------------------------------------------------
   242                              <1> ;
   243                              <1> ; Convenience macro
   244                              <1> ; Exit to operating system under Linux.
   245                              <1> ;-------------------------------------------------------------
   246                              <1> %ifnmacro Exit
   247                              <1> %macro Exit 0.nolist  
   248                              <1>      mov rax, 60
   249                              <1>      xor rdi, rdi
   250                              <1>      syscall
   251                              <1> %%exit:
   252                              <1> %endmacro
   253                              <1> %endif
   254                              <1> 
   255                              <1> ; Termination Macro
   256                              <1> %ifnmacro CPexit
   257                              <1> ;-------------------------------------------------------------
   258                              <1> ;
   259                              <1> ; Convenience macro
   260                              <1> ; Exit to operating system under Linux.
   261                              <1> ;-------------------------------------------------------------
   262                              <1> %macro CPexit 0-1.nolist  
   263                              <1>      mov rax, 60
   264                              <1>      xor rdi, rdi
   265                              <1>      syscall
   266                              <1> %%exit:
   267                              <1> %endmacro
   268                              <1> %endif
   269                              <1> 
   270                              <1> %endif  ;End of Macro Definitions
     5                                  %include "CPsub64.inc"
     6                              <1> ; Last update: 2019/08/20
     7                              <1> 
     8                              <1> %ifndef CPSUB64
     9                              <1> %define CPSUB64
    10                              <1> 
    11                              <1> ; ------------------------------------------
    12                              <1> ; function prototypes
    13                              <1> ; ------------------------------------------
    14                              <1> extern Clearscr
    15                              <1> extern CloseFile
    16                              <1> extern Crlf
    17                              <1> extern ClearBuffer
    18                              <1> extern Delay
    19                              <1> extern DumpMem
    20                              <1> extern DumpCC
    21                              <1> extern DumpEflags
    22                              <1> extern DumpRegs
    23                              <1> extern IsDigit
    24                              <1> extern Mvcl
    25                              <1> extern FileOpen
    26                              <1> extern FileClose
    27                              <1> extern FileRead
    28                              <1> extern FileWrite
    29                              <1> extern ParseDecimal32
    30                              <1> extern ParseInteger32
    31                              <1> extern ParseDecimal64
    32                              <1> extern ParseInteger64
    33                              <1> extern ReadChar
    34                              <1> extern ReadDec
    35                              <1> extern ReadHex
    36                              <1> extern ReadInt
    37                              <1> extern ReadKey
    38                              <1> extern ReadString
    39                              <1> extern ReadStr
    40                              <1> extern Str_compare
    41                              <1> extern Str_copy
    42                              <1> extern Str_length
    43                              <1> extern StrLength
    44                              <1> extern Str_trim
    45                              <1> extern Str_ucase
    46                              <1> extern WriteBin
    47                              <1> extern WriteBinB
    48                              <1> extern WriteChar
    49                              <1> extern WriteDec
    50                              <1> extern WriteHex
    51                              <1> extern WriteHexDbl
    52                              <1> extern WriteHexB
    53                              <1> extern WriteInt
    54                              <1> extern WriteString
    55                              <1> ; ------------------------------------------
    56                              <1> 
    57                              <1> %endif
     6                                  
     7                                  global	main			; global entry point for ld
     8                                  
     9                                  section	.text
    10                                  ; attempting to write my own working procedure -- reverse engineered from provided procedure lib
    11                                  writeNumbers:			; takes the number in RAX and prints it in decimal, hex, and binary
    12 00000000 E8(00000000)            	call	Crlf
    13 00000005 48BA-                   	mov	rdx, decmsg	; write decmsg
    13 00000007 [7300000000000000] 
    14 0000000F E8(00000000)            	call	WriteString
    15 00000014 E8(00000000)            	call	Crlf
    16                                  	
    17 00000019 E8(00000000)            	call	WriteInt
    18 0000001E E8(00000000)            	call	Crlf
    19                                  
    20 00000023 48BA-                   	mov	rdx, hexmsg	; write hexmsg
    20 00000025 [7D00000000000000] 
    21 0000002D E8(00000000)            	call	WriteString	
    22 00000032 E8(00000000)            	call	Crlf
    23                                  
    24 00000037 E8(00000000)            	call	WriteHex
    25 0000003C E8(00000000)            	call	Crlf
    26                                  
    27 00000041 48BA-                   	mov	rdx, binmsg	; write binmsg
    27 00000043 [8B00000000000000] 
    28 0000004B E8(00000000)            	call	WriteString
    29 00000050 E8(00000000)            	call	Crlf
    30                                  
    31 00000055 E8(00000000)            	call	WriteBin
    32 0000005A E8(00000000)            	call	Crlf
    33                                  	
    34 0000005F C3                      	ret			; MUST BE INCLUDED otherwise program continues at top of next procedure
    35                                  				; in this case, causes infinite loop
    36                                  
    37                                  
    38                                  main:
    39 00000060 E8(00000000)            	call	Crlf
    40 00000065 48BA-                   	mov	rdx, prompt1
    40 00000067 [0000000000000000] 
    41 0000006F E8(00000000)            	call	WriteString
    42                                  	
    43 00000074 48BA-                   	mov 	rdx, ipbuffer	; address the data buffer
    43 00000076 [BA00000000000000] 
    44 0000007E B9FF000000              	mov	rcx, ipbuflen	; limit data
    45 00000083 E8(00000000)            	call	ReadString	; perform a keyboard read
    46 00000088 48BA-                   	mov	rdx, ipbuffer	; address numeral input area
    46 0000008A [BA00000000000000] 
    47 00000092 4889C1                  	mov	rcx, rax	; numeral count
    48 00000095 E8(00000000)            	call	ParseInteger64	; convert to signed binary
    49 0000009A 48890425[B9010000]      	mov	[num1], rax	; store signed bin
    50                                  
    51 000000A2 E8(00000000)            	call	Crlf
    52 000000A7 48BA-                   	mov	rdx, prompt2
    52 000000A9 [3F00000000000000] 
    53 000000B1 E8(00000000)            	call	WriteString
    54                                  	
    55 000000B6 48BA-                   	mov 	rdx, ipbuffer	; address the data buffer
    55 000000B8 [BA00000000000000] 
    56 000000C0 B9FF000000              	mov	rcx, ipbuflen	; limit data
    57 000000C5 E8(00000000)            	call	ReadString	; perform a keyboard read
    58 000000CA 48BA-                   	mov	rdx, ipbuffer	; address numeral input area
    58 000000CC [BA00000000000000] 
    59 000000D4 4889C1                  	mov	rcx, rax	; numeral count
    60 000000D7 E8(00000000)            	call	ParseInteger64	; convert to signed binary
    61 000000DC 48890425[C1010000]      	mov	[num2], rax	; store signed bin
    62                                  
    63                                  ;	call	DumpRegs	; dump registers for debugging
    64                                  
    65                                  ;	mov	rsi, num1	; load with address
    66                                  ;	mov	rbx, 2		; format of type 2
    67                                  ;	call	DumpMem		; dump 32 bytes at address
    68                                  
    69 000000E4 E8(00000000)            	call	Crlf
    70                                  	
    71 000000E9 488B0425[B9010000]      	mov	rax, [num1]
    72 000000F1 E80AFFFFFF              	call	writeNumbers
    73                                  
    74 000000F6 488B0425[C1010000]      	mov	rax, [num2]
    75 000000FE E8FDFEFFFF              	call	writeNumbers
    76                                  
    77                                  	; now, print OR, AND, and XOR
    78                                  	
    79 00000103 488B0425[B9010000]      	mov	rax, [num1]
    80 0000010B E8(00000000)            	call	WriteInt
    81 00000110 48BA-                   	mov	rdx, ormsg
    81 00000112 [9400000000000000] 
    82 0000011A E8(00000000)            	call	WriteString
    83 0000011F 488B0425[C1010000]      	mov	rax, [num2]
    84 00000127 E8(00000000)            	call	WriteInt
    85 0000012C E8(00000000)            	call	Crlf
    86                                  
    87 00000131 488B0425[B9010000]      	mov	rax, [num1]
    88 00000139 488B1C25[C1010000]      	mov	rbx, [num2]
    89 00000141 4809D8                  	or	rax, rbx	; num1 OR num2, result in RAX
    90 00000144 E8B7FEFFFF              	call	writeNumbers
    91 00000149 E8(00000000)            	call	Crlf
    92                                  
    93                                  
    94 0000014E 488B0425[B9010000]      	mov	rax, [num1]
    95 00000156 E8(00000000)            	call	WriteInt
    96 0000015B 48BA-                   	mov	rdx, andmsg
    96 0000015D [9900000000000000] 
    97 00000165 E8(00000000)            	call	WriteString
    98 0000016A 488B0425[C1010000]      	mov	rax, [num2]
    99 00000172 E8(00000000)            	call	WriteInt
   100 00000177 E8(00000000)            	call	Crlf
   101                                  
   102 0000017C 488B0425[B9010000]      	mov	rax, [num1]
   103 00000184 488B1C25[C1010000]      	mov	rbx, [num2]
   104 0000018C 4821D8                  	and	rax, rbx	; num1 AND num2, result in RAX
   105 0000018F E86CFEFFFF              	call	writeNumbers
   106 00000194 E8(00000000)            	call	Crlf
   107                                  
   108 00000199 488B0425[B9010000]      	mov	rax, [num1]
   109 000001A1 E8(00000000)            	call	WriteInt
   110 000001A6 48BA-                   	mov	rdx, xormsg
   110 000001A8 [9F00000000000000] 
   111 000001B0 E8(00000000)            	call	WriteString
   112 000001B5 488B0425[C1010000]      	mov	rax, [num2]
   113 000001BD E8(00000000)            	call	WriteInt
   114 000001C2 E8(00000000)            	call	Crlf
   115                                  
   116 000001C7 488B0425[B9010000]      	mov	rax, [num1]
   117 000001CF 488B1C25[C1010000]      	mov	rbx, [num2]
   118 000001D7 4831D8                  	xor	rax, rbx	; num1 XOR num2, result in RAX
   119 000001DA E821FEFFFF              	call	writeNumbers
   120 000001DF E8(00000000)            	call	Crlf
   121                                  
   122                                  term	equ	$
   123 000001E4 48BA-                   	mov	rdx, eopmsg
   123 000001E6 [A500000000000000] 
   124 000001EE E8(00000000)            	call	WriteString
   125                                  	
   126 000001F3 B83C0000004831FF0F-     	Exit
   126 000001FC 05                 
   127                                  section .data
   128 00000000 506C6561736520656E-     prompt1	db 	"Please enter a signed integer between 2^63 - 1 and -2^63 - 1: ",00h	; First prompt & NULL
   128 00000009 746572206120736967-
   128 00000012 6E656420696E746567-
   128 0000001B 657220626574776565-
   128 00000024 6E20325E3633202D20-
   128 0000002D 3120616E64202D325E-
   128 00000036 3633202D20313A2000 
   129 0000003F 506C6561736520656E-     prompt2	db	"Please enter a second number with the same limits: ",00h	; second prompt & NULL
   129 00000048 746572206120736563-
   129 00000051 6F6E64206E756D6265-
   129 0000005A 722077697468207468-
   129 00000063 652073616D65206C69-
   129 0000006C 6D6974733A2000     
   130 00000073 444543494D414C3A20-     decmsg	db	"DECIMAL: ",00h
   130 0000007C 00                 
   131 0000007D 48455841444543494D-     hexmsg	db	"HEXADECIMAL: ",00h
   131 00000086 414C3A2000         
   132 0000008B 42494E4152593A2000      binmsg	db	"BINARY: ",00h
   133 00000094 204F522000              ormsg 	db	" OR ",00h
   134 00000099 20414E442000            andmsg	db	" AND ",00h
   135 0000009F 20584F522000            xormsg	db	" XOR ",00h
   136 000000A5 50726F6772616D2074-     eopmsg	db	"Program terminating.",00h
   136 000000AE 65726D696E6174696E-
   136 000000B7 672E00             
   137 000000BA 20<rep FFh>             ipbuffer times 	255 db 20h			; define buffer of spaces
   138                                  ipbuflen equ	$-ipbuffer
   139 000001B9 0000000000000000        num1	dq	00h	; first number
   140 000001C1 0000000000000000        num2	dq	00h	; second number
